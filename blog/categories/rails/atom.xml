<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Software Development Stuff]]></title>
  <link href="http://blog.tommijarvinen.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://blog.tommijarvinen.com/"/>
  <updated>2014-03-10T20:18:03+02:00</updated>
  <id>http://blog.tommijarvinen.com/</id>
  <author>
    <name><![CDATA[Tommi JÃ¤rvinen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails Server With Nginx, Phusion Passenger and PostgreSQL]]></title>
    <link href="http://blog.tommijarvinen.com/blog/2014/03/07/rails-server-with-nginx-passenger-and-postgresql/"/>
    <updated>2014-03-07T16:36:02+02:00</updated>
    <id>http://blog.tommijarvinen.com/blog/2014/03/07/rails-server-with-nginx-passenger-and-postgresql</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Instructions for setting up Ubuntu 12.04.4 LTS to host a Ruby on Rails Application with nginx as the web server, Phusion Passenger as the application server and PostgreSQL as the database. This has been tested on a clean installation of Ubuntu 12.04.4, but should work on existing installation and different versions with little changes as well. This is one of my first blog posts so take that into account when giving feedback.</p>

<h2>Installation</h2>

<p>Write the following inside a script file and run it (Or run the commands one by one). It will add the Phusion Passenger repositories to apt sources, install it, install rbenv, ruby and bundler, stuff required to compile Ruby, PostgreSQL and nginx. Feel free to customize the script to your needs. If you prefer RVM to rbenv just change the corresponding lines etc.:</p>

<p>``` bash</p>

<h1>!/usr/bin/env bash</h1>

<p>sudo apt-key adv &mdash;keyserver keyserver.ubuntu.com &mdash;recv-keys 561F9B9CAC40B2F7
echo &ldquo;deb <a href="https://oss-binaries.phusionpassenger.com/apt/passenger">https://oss-binaries.phusionpassenger.com/apt/passenger</a> precise main&rdquo; | sudo tee -a /etc/apt/sources.list.d/passenger.list
sudo apt-get update
sudo apt-get install -y apt-transport-https ca-certificates
sudo apt-get install -y git build-essential nodejs postgresql postgresql-server-dev-9.1 libssl-dev nginx-extras passenger libcurl4-openssl-dev
git clone <a href="https://github.com/sstephenson/rbenv.git">https://github.com/sstephenson/rbenv.git</a> ~/.rbenv
echo &lsquo;export PATH=&ldquo;$HOME/.rbenv/bin:$PATH&rdquo;&rsquo; >> ~/.bash_profile
echo &lsquo;eval &ldquo;$(rbenv init &ndash;)&rdquo;&rsquo; >> ~/.bash_profile
git clone <a href="https://github.com/sstephenson/ruby-build.git">https://github.com/sstephenson/ruby-build.git</a> ~/.rbenv/plugins/ruby-build
source ~/.bash_profile
rbenv install -v 2.1.1 # replace with the ruby version that you want to use
rbenv global 2.1.1 # replace with the ruby version that you want to use
gem install -V bundler
```</p>

<h2>Configuration</h2>

<p>Change the following lines in /etc/nginx/nginx.conf:</p>

<p>```</p>

<pre><code># Phusion Passenger config
##
# Uncomment it if you installed passenger or passenger-enterprise
##

# passenger_root /usr/lib/ruby/vendor_ruby/phusion_passenger/locations.ini;
# passenger_ruby /usr/bin/ruby;

##
# Virtual Host Configs
##
</code></pre>

<p>```</p>

<p>to:</p>

<p>```</p>

<pre><code># Phusion Passenger config
##
# Uncomment it if you installed passenger or passenger-enterprise
##

passenger_root /usr/lib/ruby/vendor_ruby/phusion_passenger/locations.ini;
passenger_ruby /&lt;path/to/where/you/installed/ruby&gt;/bin/ruby;

#Add the following line if you don't want passenger to display friendly debug information when your application fails to start:
passenger_friendly_error_pages off;

##
# Virtual Host Configs
##
</code></pre>

<p>```
(Default ruby installation directory is /home/&lt;username>/.rbenv/versions/&lt;ruby-version>)</p>

<p>Generate a ssh keypair and add your public key to where you deploy from (If you need to and use git with ssh). Otherwise just do whatever you need to get your application to the server. Guide to ssh key generation can be found at <a href="https://help.github.com/articles/generating-ssh-keys" title="https://help.github.com/articles/generating-ssh-keys" target="_blank"><a href="https://help.github.com/articles/generating-ssh-keys">https://help.github.com/articles/generating-ssh-keys</a></a></p>

<p>Clone your repo to a directory of your choosing (If you use git):</p>

<p>```</p>

<pre><code>$ git clone &lt;your-git-repo-address&gt;
</code></pre>

<p>```</p>

<p>Add an user to postgresql with the name and password you specified in the production database config in your database.yml:</p>

<p>```</p>

<pre><code>$ sudo -u postgres psql
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>create user &lt;username&gt;  with password '&lt;password&gt;';
</code></pre>

<p>```</p>

<p>```</p>

<pre><code>alter role &lt;username&gt; createdb;
</code></pre>

<p>```</p>

<p>To exit psql prompt, type:</p>

<p>```</p>

<pre><code>\q
</code></pre>

<p>```</p>

<p>Change the local authentication line in /etc/postgresql/9.1/main/pg_hba.conf:</p>

<p>```</p>

<h1>TYPE  DATABASE        USER            ADDRESS                 METHOD</h1>

<h1>&ldquo;local&rdquo; is for Unix domain socket connections only</h1>

<p>local   all             all                                     peer</p>

<h1>IPv4 local connections:</h1>

<p>host    all             all             127.0.0.1/32            md5
```</p>

<p>to:</p>

<p>```</p>

<h1>TYPE  DATABASE        USER            ADDRESS                 METHOD</h1>

<h1>&ldquo;local&rdquo; is for Unix domain socket connections only</h1>

<p>local   all             all                                     md5</p>

<h1>IPv4 local connections:</h1>

<p>host    all             all             127.0.0.1/32            md5
```</p>

<p>to allow password authentication to postgresql</p>

<p>And then restart postgresql:
```</p>

<pre><code>$ sudo service postgresql restart
</code></pre>

<p>```</p>

<p>source ~/.bash_profile to get access to rbenv and new commands of the gems that were installed:
```</p>

<pre><code>$ source ~/.bash_profile
</code></pre>

<p><code>
Go to your rails application root and run bundle install:
</code></p>

<pre><code>$ bundle install --without development test
</code></pre>

<p><code>
Make sure your secret token is specified in your application's config/application.yml if you're using the &lt;a href="https://github.com/laserlemon/figaro" title="https://github.com/laserlemon/figaro" target="_blank"&gt;figaro&lt;/a&gt; gem. If not, you can generate a new one with the following command in your rails apps's root:
</code></p>

<pre><code>$ rake secret
</code></pre>

<p>```
Then just add that to &lt;your/rails/application/root>/config/application.yml:</p>

<p><code>
SECRET_TOKEN: &lt;generated-token-here&gt;
</code></p>

<p>If you are using ssl, now is the time to import your certificates or generate them. The following configurations assume they are stored in /etc/nginx/ssl/</p>

<p>Create a file to /etc/nginx/sites-enabled/ with the name of the name of your application and add the following contents Replace leading whitespaces with tabs if nginx complains about them:</p>

<p>```
server {</p>

<pre><code>    listen 80;
    server_name &lt;your-domain-here&gt;;
    root &lt;your/rails/application/root&gt;/public;
    passenger_enabled on;
</code></pre>

<p>}</p>

<h1>Comment this out if you are using SSL</h1>

<h1>server {</h1>

<pre><code>    # listen 443 ssl;
    # server_name &lt;your-domain-here&gt;;
    # passenger_enabled on;
    # root &lt;your/rails/application/root&gt;/public;
    # ssl_certificate /etc/nginx/ssl/server.crt; # Replace with the path to your certificate
    # ssl_certificate_key /etc/nginx/ssl/server.key; # Replace with the path to your key
</code></pre>

<h1>}</h1>

<p>```</p>

<p>Then modify /etc/nginx/nginx.conf to only include that site configuration:</p>

<p>```</p>

<pre><code>    ##
    # Virtual Host Configs
    ##

    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/&lt;the-server-conf-file-you-created&gt;;
</code></pre>

<p>}
<code>
Go to your rails application root and run the following commands:
</code></p>

<pre><code>$ RAILS_ENV=production rake db:setup assets:precompile
</code></pre>

<p><code>
Then restart nginx:
</code></p>

<pre><code>$ sudo service nginx restart
</code></pre>

<p>```
Your application should now be served properly by nginx on port 80 :) If you run into problems, check the logs at /var/log/nginx to see whether they help identify the problem.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant for Ruby on Rails Development on Ubuntu 13.10]]></title>
    <link href="http://blog.tommijarvinen.com/blog/2014/03/03/vagrant-for-ruby-on-rails-development-on-ubuntu-13-dot-10/"/>
    <updated>2014-03-03T15:12:17+02:00</updated>
    <id>http://blog.tommijarvinen.com/blog/2014/03/03/vagrant-for-ruby-on-rails-development-on-ubuntu-13-dot-10</id>
    <content type="html"><![CDATA[<h2>Installing</h2>

<p>Vagrant can be installed on Ubuntu via apt-get, but the version is really old. I downloaded the .deb -file from <a href="http://www.vagrantup.com/downloads.html.">http://www.vagrantup.com/downloads.html.</a></p>

<h2>Configuring</h2>

<p>First create a folder for your project and go to that folder. The following command will initialize a new vagrant virtual machine and use Ubuntu Precise as the base:</p>

<pre><code>$ vagrant init precise32 http://files.vagrantup.com/precise32.box
</code></pre>

<p>Vagrant will also create a Vagrantfile in the working directory. Open the file for editing and the change the following line:</p>

<p><code>ruby
  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network :forwarded_port, guest: 80, host: 8080
</code></p>

<p>to</p>

<p><code>ruby
  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  config.vm.network :forwarded_port, guest: 3000, host: 3000
</code></p>

<p>to forward the default Rails development port to the virtual machine.
Now create two script files to the same directory with Vagrantfile. We will include all software installation in those scripts. You can name the scripts as you like, the names that I use are just examples:</p>

<pre><code>$ nano installation.sh
</code></pre>

<p>I have put the following commands into the first scripts that will be run as root. Feel free to customize these commands to your liking. Node.js is included because its needed for some javascript operations:</p>

<p>``` bash</p>

<h1>!/usr/bin/env bash</h1>

<p>echo -e &ldquo;deb mirror://mirrors.ubuntu.com/mirrors.txt precise main restricted universe multiverse\ndeb mirror://mirrors.ubuntu.com/mirrors.txt precise-updates main restricted universe multiverse\ndeb mirror://mirrors.ubuntu.com/mirrors.txt precise-backports main restricted universe multiverse\ndeb mirror://mirrors.ubuntu.com/mirrors.txt precise-security main restricted universe multiverse\n$(cat /etc/apt/sources.list)&rdquo; > /etc/sources.list
apt-get update
apt-get install -y git build-essential nodejs libsqlite3-dev
```</p>

<p>After this create another script file to be run as normal user. The script will first install rbenv for easy switching between different Ruby versions. Then it will install a version of Ruby, in my case 2.1.0. It will then set that version of Ruby to be the global default. Finally it will install Rails and Bundler:</p>

<pre><code>$ nano installation_user.sh
</code></pre>

<p>``` bash</p>

<h1>!/usr/bin/env bash</h1>

<p>git clone <a href="https://github.com/sstephenson/rbenv.git">https://github.com/sstephenson/rbenv.git</a> ~/.rbenv
echo &lsquo;export PATH=&ldquo;$HOME/.rbenv/bin:$PATH&rdquo;&rsquo; >> ~/.bash_profile
echo &lsquo;eval &ldquo;$(rbenv init &ndash;)&rdquo;&rsquo; >> ~/.bash_profile
git clone <a href="https://github.com/sstephenson/ruby-build.git">https://github.com/sstephenson/ruby-build.git</a> ~/.rbenv/plugins/ruby-build
source ~/.bash_profile
rbenv install -v 2.1.0 # replace with the ruby version that you want to use
rbenv global 2.1.0 # replace with the ruby version that you want to use
gem install rails
gem install bundler
```</p>

<p>After this add the following lines to Vagrantfile to include your new shell scripts:</p>

<p><code>ruby
  config.vm.provision :shell, path: "installation.sh"
  config.vm.provision :shell, path: "installation_user.sh", privileged: false
</code></p>

<p>After this the configuration for your Ruby on Rails development environment should be configured and you can start the Vagrant box with the following command:</p>

<pre><code>$ vagrant up
</code></pre>

<p>The startup will take some time the first time because it will install the whole system like you previously configured. After the process has finished you can ssh to your new virtual machine with the command:</p>

<pre><code>$ vagrant ssh
</code></pre>

<p>The directory where you most likely will want to initialize your Rails project(s) inside the virtual machine is:</p>

<pre><code>/vagrant/
</code></pre>

<p>Since it will be shared between your guest and host machine. You should now be set up to start developing your application.</p>
]]></content>
  </entry>
  
</feed>
